

Q13.1) What is the most efficient sorting algorithm for each of the following situations

a) A large array whose entries are random numbers
   Quicksort. 
   In general quicksort is considered one of the most efficient sorting algorithms since it has an average case run time O(nlogn)
   and sorts in place

b) Small array of numbers
   For a small set a simpler implementation such as insertion sort is easier to code, and runs faster in practice.

c) A large array of numbers that is already almost sorted
   if every element is known to be at most k places from its final location, a min heap can be used to get an O(nlogk) algorithm

d) A large collection of integers that are drawn from a small range
   Counting sort
   Records for each element, the number of elements less than it. This cout can be kept in an array or a BST. where keys are the numbers
   abd the values their frequency.

e) A large collection of numbers most of which are duplicates.
   We can add the keys to a BST, with linked lists for elements which have the same key; the sorted result can be derived from an in-order 
   walk of the BST.

f) Stability is required
   Most useful sorting algorithms are not stable. Merge sort, carefully implemented can be made stable; another solution is to add the index as an integer
   rank to the keys to break ties.